Pre-Release:
1) complete shield damage/protection scaling
2) Collision optimization (voxel, shield and a bit more tuning of blocks).

Release:
1) Finish and test Multiplayer
2) Add particle effects to the actual shield verts/triangles.  Perhaps even impact animations.
3) Weapon ModAPI support  Ray + Sphere & Line + OBB in v1.
4) Confirm unloading of mod properly.
5) require emitters to be within range from other emitters to complete a combined (larger) field.
6) Block definition manager / type getter thing.

Bugs:
1) Exploit, second grid can be used to beat LOS check.  Fix: Check all grids within range.
2) Animation balls are lagging during velocity.
3) Power maint scales in the wrong direction
4) Inside entiteis cannot cause deformation damage... perhaps its best to regen vs prevent.

version 2:
1) Add damage shield block.
2) support forward, back, left, right, top and bottom shields.
3) fix auto size adjustment corner cases
4) shield power efficiency by distance from reactors or relays.
5) control block and readouts
6) Ellipsoid weapon MODAPI

Done:
1) *DONE* finish small ship and station blocks.
2) *DONE* allow emitters on outside of ship only
3) *DONE* Add a toggle for owner to disable idle shield state visability.
4) *DONE* Limit placement of station/LargeShip on their respective grids.
5) *DONE* In game game state messages.
6) *DONE* try and find a better point to applyforce against, perhaps use distance and face check.
7) *DONE* Add voxel sight check
8) *DONE* Complete power usage algorthim.
9) *DONE* Make sure only entiteis that spawned inside are counted as inside and respect proper damage for all inside entiteis (both shield vs non and vs)


Lowest priority group gets as much power is available after all higher priorities get their stuff.
Hmm ok so if I am understanding correctly I can make my own lowest priority group?  Is there a way to see how much power that block/group actually consumed vs requested?
ResourceDistributionGroups.sbc
SuppliedRatioByType

optimize block cache with LocalAABB of fat block (ignore all tiny blocks).